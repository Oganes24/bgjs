#!/usr/bin/env node
var debug           = require('debug')('workspace');
var app             = require('../app');

var requser         = require('user');
var replayers       = require('players');
var regame          = require('game');
var regamecontroll  = require('games.controller');

//var userobj = new user();

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

/*
    #                                   #
    # Работает с подключенными игроками #
    #                                   #
*/

/* создаем объект работающий со списком пользователей */
var players = new replayers();

var io = require('socket.io')(server);

var games = new regamecontroll();

io.on('connection' , function(socket){
    var user    = new requser();
    var game    = new regame();
    var enemy   = {};
    
    // сохраняем сокет
    user.setSocket(socket);
    
    socket.on('registr' , function(data){
        debug('registr : ' , data);
        
        // Регистрируем пользователя на сервере
        user.registr(data);
        
        // Добавляем пользователя в общий список игроков
        players.addPlayer(user);
        
        // Смотрим сколько у нас игроков
        players.showList();
        
        // Ищем свободного игрока
        user.enemy = players.findFreePlayer(user.id);
        
        // Проверяем найден ли свободный игрок
        if('key' in user.enemy || 'id' in user.enemy){
            // Блокируем доступ к нему
            if(players.lockPlayer(user.enemy)){
                // Блокируем подключившегося игрока
                user.lock = true;
                debug("Players blocked: " , user.enemy , {id : user.id});
                
                /*
                    ###     ###     ###     ###     ###     ###     ###     ###     ###   ###
                    ### Сделал открытие, заблокировав игрока напрямую (user.lock = true), ###
                    ### Он так же заблокировался и глобальном массиве игроков arr players ###
                    ###     ###     ###     ###     ###     ###     ###     ###     ###   ###
                */
                // Создаем переменную с объектом аппонента
                enemy = players.list[user.enemy.key];
                
                // Сохраняем идентификаторы пользователей
                game.players[0] = user.id;
                game.players[1] = enemy.id;
                
                // Генерируем идентификаторы фишек
                game.generatePieces();
                
                // Генерируем значение лотовых костей
                var lotbones = game.generateLotBones();
                // Генерируем зачение шаговых костей
                game.generateBones();
                
                // Отправляем данные созданной игры
                user.socket.emit('takeGameData' , {
                    id          : enemy.id , 
                    pieces      : game.pieces , 
                    bones       : game.bones , 
                    lotbones    : [ lotbones[0] , lotbones[1] ]
                });
                
                enemy.socket.emit('takeGameData' , {
                    id          : user.id ,
                    pieces      : game.pieces ,
                    bones       : game.bones ,
                    lotbones    : [ lotbones[1] , lotbones[0] ]
                });
                
                // сохраняем игру глобально
                games.addGame({id : user.id , socket : socket} , { id : enemy.id , socket : enemy.socket});
                
            }else{
                debug("ERROR Can't blocked player %d " , user.enemy);
            }
        }else{debug("Don't find enemy for player");}
    });
    
    /* ### Получен запрос сгенерировать новые кости ### */
    socket.on('setBones' , function(data){
        // генерируем кости
        game.generateBones();
        // рассылаем значение костей
        sendRequestEvery('setBones' , game.bones);
    }); 
    
    socket.on('transferStep' , function(data){
        debug('transferStep' , data);
        
        // если у нас в массиве один объект, выносим его из массива
        if(data.length === 1){
            data = data[0];
        }
        games.sendEnemyData(user.id , 'takeStep' , data);
    });
    
    socket.on('transferStepEnd' , function(data){
        if(data){
            game.generateBones();
            games.sendEnemyData(user.id , 'stepBegin' , {bones : game.bones});
            games.sendSelfData(user.id , 'takeBones' , {bones : game.bones});
        }
    });
    
    socket.on('sendLose' , function(data){
        games.sendEnemyData(user.id , 'finishGame' , {});
    });
    
    /*
        # Отключение пользователя 
        #
        #
    */
    socket.on('disconnect' , function(){
        // Удаляем игрока из общего списка
        players.deletePlayer(user.id);
        players.showList();
    });
    
    function sendRequestEvery(name , data){
        if(name !== undefined && name !== ''){
            user.socket.emit(name , data);
            enemy.socket.emit(name , data);
        }
    }
});