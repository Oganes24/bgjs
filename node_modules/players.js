var debug = require('debug')('players');

function Players(){}

Players.prototype.list = [];

/*
    # 
    #
    #
*/

Players.prototype.lockPlayer = function(data){
    var id       = ('id' in data) ? true : false;
    var key      = ('key'in data) ? true : false;
    var controll = {};
    
    if(key){
        // делаем дополнительную проверку
        if(id){
            controll = this.getPlayerByParams({key : data.key});
            if(controll.id === this.list[data.key].id){
                this.list[data.key].lock = true;
                return true;
            }else{debug("ERROR ID and KEY don't match");}
        }else{
            this.list[data.key].lock = true;
            return true;
        }
    }else if(id){
        controll = this.getPlayerByParams({id : data.id});
        this.list[controll.key].lock = true;
        return true;
    }else{
        debug("ERROR don't isset key or id for locking player!");
        return false;
    }
}


/*
    # Получить объект пользователя по параметру
    # data : { mix id | key}
    #
*/
Players.prototype.getPlayerByParams = function(data){
    var controll    = true;
    var i           = 0;
    
    var id  = ('id' in data) ? true : false;
    var key = ('key'in data) ? true : false;
    
    if(!id && !key){debug('ERROR function parametr must be id or key!');}
    
    if(key){
        if(this.list[data.key] !== undefined){
            return {id : this.list[data.key].id , key : data.key};
        }else{debug("ERROR Element list players with key %d - undefined" , data.key);}
    }
    
    while(controll){
        if(this.list[i] !== undefined){
            if(id){
                if(this.list[i].id === data.id){
                    controll = false;
                    return {id : data.id , key : i};
                }
            }
        } // if list !== undefined
        
        i++;
        if(i === this.list.length) controll = false;
    } // while controll
}


/*
    # Поиск свободного игрока
    #
    #
*/
Players.prototype.findFreePlayer = function(plid){
    var find        = false;
    var controll    = true;
    var i           = 0;
    
    while(controll){
        if('id' in this.list[i] && this.list[i].id !== 0){
            if(this.list[i].id !== plid){
                if(!this.list[i].lock){
                    controll    = false;
                    find        = true;
                    return {key : i , id : this.list[i].id};
                }
            }
        }
        
        i++;
        if(i === this.list.length) controll = false;
    }
    
    if(!find){
        return {};
    }
};

/*
    #
    # Добавление игрока в общий список игроков
    #
*/
Players.prototype.addPlayer = function(player){
    if( (player !== undefined) && ('id' in player) ){
        this.list.push(player);
    }else{
        debug("ERROR Parameter player it undefined");
    }
};

/*
    #
    # Удаление игрока из общего списка игроков
    #
*/
Players.prototype.deletePlayer = function(id){
    var i           = 0;
    var controll    = true;
    
    while(controll){
        if(this.list[i] !== undefined){
            if(this.list[i].id === id){
                debug('player %d diconnect' , id);
                this.list.splice(i , 1);
                controll = false;
            }
        }
        i++;
        if(i === this.list.length) controll = false;
    }
};

/*
    #
    # Отображение списка игроков
    #
*/

Players.prototype.showList = function(){
    if(this.list.length !== 0){
        console.log('Players online: ');
        for(var i = 0; i < this.list.length; i++){
            debug('id: %d' , this.list[i].id);
        }
    }else{
        console.log('Not player on server');
    }
};

module.exports = Players;